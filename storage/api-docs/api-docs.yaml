openapi: 3.1.0

info:
  title: ERP API
  version: 1.0.0

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      description: Personal access token authorization
  parameters:
    user:
      in: path
      name: user
      description: User id or slug
      required: true
      schema:
        oneOf:
          - type: integer
          - type: string
      examples:
        id:
          summary: Id
          value: 1
        slug:
          summary: Slug
          value: 'me'
    product:
      in: path
      name: product
      description: Product id
      required: true
      schema:
        type: integer
        example: 1
    superior_id:
      in: query
      name: superior_id
      description: Superior id
      schema:
        type: integer
        default: acting user id
        example: 1
    owner_id:
      in: query
      name: owner_id
      description: Owner id
      schema:
        type: integer
        default: acting user id
        example: 1
    perPage:
      in: query
      name: per_page
      description: Number of items per pagination page
      schema:
        type: integer
        minimum: 1
        default: 15
        example: 2
    page:
      in: query
      name: page
      description: Number of pagination page
      schema:
        type: integer
        minimum: 1
        default: 1
        example: 1
  schemas:
    user:
      type: object
      properties:
        id:
          type: integer
          example: 1
        login:
          type: string
          example: user
        role:
          type: string
          example: buyer
        superior_id:
          type: integer
          nullable: true
          example: 2
        created_at:
          type: string
          example: 2024-01-01 00:00:00
        updated_at:
          type: string
          example: 2024-01-01 00:00:00
    product:
      type: object
      properties:
        id:
          type: integer
          example: 1
        title:
          type: string
          example: New Product
        description:
          type: string
          example: New Product Description
        price:
          type: number
          example: 99.99
        owner_id:
          type: integer
          example: 1
        created_at:
          type: string
          example: 2024-01-01 00:00:00
        updated_at:
          type: string
          example: 2024-01-01 00:00:00
    pagination:
      type: object
      properties:
        total:
          type: integer
          example: 6
        from:
          type: integer
          nullable: true
          example: 3
        to:
          type: integer
          nullable: true
          example: 4
        per_page:
          type: integer
          example: 2
        current_page:
          type: integer
          example: 2
        last_page:
          type: integer
          example: 3
  responses:
    '204':
      description: No Content
    '401':
      description: Unauthorized
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: Error message
    '403':
      description: Forbidden
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: Error message
    '404':
      description: Not Found
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: Error message
    '422':
      description: Unprocessable Content
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: Error message
              errors:
                type: object
                properties:
                  field_name:
                    type: array
                    items:
                      type: string
                      example: Error message

security:
 - bearerAuth: []

paths:
  /api/auth/sign-in:
    post:
      tags:
        - Auth
      summary: Sign in
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                login:
                  type: string
                  maximum: 255
                  example: user
                password:
                  type: string
                  minimum: 8
                  maximum: 255
                  format: password
                  example: password
              required:
                - login
                - password
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/user'
                      token:
                        type: string
                        example: 1|fBb0ZnfxkHrd4t3hGt4LVFj9tTh84hzqVH1oZPP5914dcdd9
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '422':
          $ref: '#/components/responses/422'
  /api/auth/sign-out:
    post:
      tags:
        - Auth
      summary: Sign out
      responses:
        '204':
          $ref: '#/components/responses/204'
        '401':
          $ref: '#/components/responses/401'
  /api/users:
    get:
      tags:
        - Users
      summary: Index Users
      parameters:
        - $ref: '#/components/parameters/superior_id'
        - $ref: '#/components/parameters/perPage'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/user'
                  meta:
                    $ref: '#/components/schemas/pagination'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'
    post:
      tags:
        - Users
      summary: Create User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                login:
                  type: string
                  maximum: 255
                  example: user
                password:
                  type: string
                  minimum: 8
                  maximum: 255
                  format: password
                  example: password
                superior_id:
                  type: integer
                  example: 1
              required:
                - login
                - password
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/user'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '422':
          $ref: '#/components/responses/422'
  /api/users/{user}:
    get:
      tags:
        - Users
      summary: Show User
      parameters:
        - $ref: '#/components/parameters/user'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/user'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
    patch:
      tags:
        - Users
      summary: Update User
      parameters:
        - $ref: '#/components/parameters/user'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                login:
                  type: string
                  maximum: 255
                  example: user
                password:
                  type: string
                  minimum: 8
                  maximum: 255
                  format: password
                  example: password
                superior_id:
                  type: integer
                  example: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/user'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
    delete:
      tags:
        - Users
      summary: Delete User
      parameters:
        - $ref: '#/components/parameters/user'
      responses:
        '204':
          $ref: '#/components/responses/204'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /api/products:
    get:
      tags:
        - Products
      summary: Index Products
      parameters:
        - $ref: '#/components/parameters/owner_id'
        - $ref: '#/components/parameters/perPage'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/product'
                  meta:
                    $ref: '#/components/schemas/pagination'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'
    post:
      tags:
        - Products
      summary: Create Product
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  maximum: 255
                  example: New Product
                description:
                  type: string
                  maximum: 255
                  example: New Product Description
                price:
                  type: number
                  maximum: 999999.99
                  example: 99.99
              required:
                - title
                - price
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/product'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '422':
          $ref: '#/components/responses/422'
  /api/products/{product}:
    get:
      tags:
        - Products
      summary: Show Product
      parameters:
        - $ref: '#/components/parameters/product'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/product'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
    patch:
      tags:
        - Products
      summary: Update Product
      parameters:
        - $ref: '#/components/parameters/product'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  maximum: 255
                  example: Updated Product
                description:
                  type: string
                  maximum: 255
                  example: Updated Product Description
                price:
                  type: number
                  minimum: 0
                  maximum: 999999.99
                  example: 88.88
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/product'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
